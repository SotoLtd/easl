<?php
if ( ! defined( 'ABSPATH' ) ) {
    die( '-1' );
}

return array(
    'name' => __( 'EASL Staff List', 'total' ),
    'base' => 'easl_staff_list',
    'is_container' => false,
    'show_settings_on_create' => true,
    'category' => __( 'EASL', 'total' ),
    'description' => __( 'EASL Staff List', 'total' ),
    'icon' => 'vcex-icon ticon ticon-book',
    'php_class_name' => 'EASL_VC_STAFF_LIST',
    'params' => array(
        vc_map_add_css_animation(),
        array(
            'type'        => 'el_id',
            'heading'     => __( 'Element ID', 'js_composer' ),
            'param_name'  => 'el_id',
            'description' => sprintf( __( 'Enter element ID (Note: make sure it is unique and valid according to <a href="%s" target="_blank">w3c specification</a>).', 'js_composer' ), 'http://www.w3schools.com/tags/att_global_id.asp' ),
        ),
        array(
            'type'        => 'textfield',
            'heading'     => __( 'Extra class name', 'js_composer' ),
            'param_name'  => 'el_class',
            'description' => __( 'Style particular content element differently - add a class name and refer to it in custom CSS.', 'js_composer' ),
        ),
        array(
            'type'       => 'css_editor',
            'heading'    => __( 'CSS box', 'js_composer' ),
            'param_name' => 'css',
            'group'      => __( 'Design Options', 'js_composer' ),
        ),
        // Query
        array(
            'type' => 'vcex_ofswitch',
            'std' => 'false',
            'heading' => __( 'Advanced Query?', 'total' ),
            'param_name' => 'custom_query',
            'group' => __( 'Query', 'total' ),
            'description' => __( 'Enable to build a custom query using your own parameter string.', 'total' ),
        ),
        array(
            'type' => 'textarea_safe',
            'heading' => __( 'Custom query', 'total' ),
            'param_name' => 'custom_query_args',
            'description' => __( 'Build custom query according to <a href="http://codex.wordpress.org/Function_Reference/query_posts" target="_blank">WordPress Codex</a>.', 'total' ),
            'group' => __( 'Query', 'total' ),
            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'true' ) ),
        ),
//        array(
//            'type' => 'textfield',
//            'heading' => __( 'Posts Per Page', 'total' ),
//            'param_name' => 'posts_per_page',
//            'value' => '9',
//            'description' => __( 'When pagination is disabled this is also used for the post count.', 'total' ),
//            'group' => __( 'Query', 'total' ),
//            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
//        ),
//        array(
//            'type' => 'textfield',
//            'heading' => __( 'Offset', 'total' ),
//            'param_name' => 'offset',
//            'group' => __( 'Query', 'total' ),
//            'description' => __( 'Number of post to displace or pass over. Warning: Setting the offset parameter overrides/ignores the paged parameter and breaks pagination. The offset parameter is ignored when posts per page is set to -1.', 'total' ),
//            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
//        ),
//        array(
//            'type' => 'vcex_ofswitch',
//            'std' => 'false',
//            'heading' => __( 'Pagination', 'total' ),
//            'param_name' => 'pagination',
//            'group' => __( 'Query', 'total' ),
//            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
//        ),
        array(
            'type' => 'autocomplete',
            'heading' => __( 'Include Categories', 'total' ),
            'param_name' => 'include_categories',
            'param_holder_class' => 'vc_not-for-custom',
            'admin_label' => true,
            'settings' => array(
                'multiple' => true,
                'min_length' => 1,
                'groups' => false,
                'unique_values' => true,
                'display_inline' => true,
                'delay' => 0,
                'auto_focus' => true,
            ),
            'group' => __( 'Query', 'total' ),
            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
        ),
        array(
            'type' => 'autocomplete',
            'heading' => __( 'Exclude Categories', 'total' ),
            'param_name' => 'exclude_categories',
            'param_holder_class' => 'vc_not-for-custom',
            'admin_label' => true,
            'settings' => array(
                'multiple' => true,
                'min_length' => 1,
                'groups' => false,
                'unique_values' => true,
                'display_inline' => true,
                'delay' => 0,
                'auto_focus' => true,
            ),
            'group' => __( 'Query', 'total' ),
            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
        ),
        array(
            'type' => 'dropdown',
            'heading' => __( 'Order', 'total' ),
            'param_name' => 'order',
            'group' => __( 'Query', 'total' ),
            'value' => array(
                __( 'Default', 'total' ) => '',
                __( 'DESC', 'total' ) => 'DESC',
                __( 'ASC', 'total' ) => 'ASC',
            ),
            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
        ),
        array(
            'type' => 'dropdown',
            'heading' => __( 'Order By', 'total' ),
            'param_name' => 'orderby',
            'value' => vcex_orderby_array(),
            'group' => __( 'Query', 'total' ),
            'dependency' => array( 'element' => 'custom_query', 'value' => array( 'false' ) ),
        ),
        array(
            'type' => 'textfield',
            'heading' => __( 'Orderby: Meta Key', 'total' ),
            'param_name' => 'orderby_meta_key',
            'group' => __( 'Query', 'total' ),
            'dependency' => array(
                'element' => 'orderby',
                'value' => array( 'meta_value_num', 'meta_value' ),
            ),
        ),
    ),
);
